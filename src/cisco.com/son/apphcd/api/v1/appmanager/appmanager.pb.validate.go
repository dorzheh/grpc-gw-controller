// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: appmanager.proto

package appmanager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CreateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) < 1 {
		return CreateAppRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for AppState

	if !_CreateAppRequest_Version_Pattern.MatchString(m.GetVersion()) {
		return CreateAppRequestValidationError{
			field:  "Version",
			reason: "value does not match regex pattern \"^\\\\w*\\\\d+(\\\\.\\\\d)*$\"",
		}
	}

	// no validation rules for FromCatalog

	// no validation rules for Description

	if _, ok := _CreateAppRequest_Cycle_InLookup[m.GetCycle()]; !ok {
		return CreateAppRequestValidationError{
			field:  "Cycle",
			reason: "value must be in list [periodic daemon run_once]",
		}
	}

	if v, ok := interface{}(m.GetCyclePeriodicAttr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAppRequestValidationError{
				field:  "CyclePeriodicAttr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RootGroupId

	if len(m.GetGroupIds()) < 1 {
		return CreateAppRequestValidationError{
			field:  "GroupIds",
			reason: "value must contain at least 1 item(s)",
		}
	}

	// no validation rules for AppConfigs

	// no validation rules for EnvVars

	// no validation rules for Secrets

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for SharedStorage

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAppRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateAppRequestValidationError is the validation error returned by
// CreateAppRequest.Validate if the designated constraints aren't met.
type CreateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAppRequestValidationError) ErrorName() string { return "CreateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAppRequestValidationError{}

var _CreateAppRequest_Version_Pattern = regexp.MustCompile("^\\w*\\d+(\\.\\d)*$")

var _CreateAppRequest_Cycle_InLookup = map[string]struct{}{
	"periodic": {},
	"daemon":   {},
	"run_once": {},
}

// Validate checks the field values on UpgradeAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpgradeAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) < 1 {
		return UpgradeAppRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for AppState

	if !_UpgradeAppRequest_Version_Pattern.MatchString(m.GetVersion()) {
		return UpgradeAppRequestValidationError{
			field:  "Version",
			reason: "value does not match regex pattern \"^\\\\w*\\\\d+(\\\\.\\\\d)*$\"",
		}
	}

	// no validation rules for FromCatalog

	// no validation rules for Description

	if _, ok := _UpgradeAppRequest_Cycle_InLookup[m.GetCycle()]; !ok {
		return UpgradeAppRequestValidationError{
			field:  "Cycle",
			reason: "value must be in list [periodic daemon run_once]",
		}
	}

	if v, ok := interface{}(m.GetCyclePeriodicAttr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpgradeAppRequestValidationError{
				field:  "CyclePeriodicAttr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RootGroupId

	// no validation rules for AppConfigs

	// no validation rules for EnvVars

	// no validation rules for Secrets

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for SharedStorage

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpgradeAppRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpgradeAppRequestValidationError is the validation error returned by
// UpgradeAppRequest.Validate if the designated constraints aren't met.
type UpgradeAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeAppRequestValidationError) ErrorName() string {
	return "UpgradeAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeAppRequestValidationError{}

var _UpgradeAppRequest_Version_Pattern = regexp.MustCompile("^\\w*\\d+(\\.\\d)*$")

var _UpgradeAppRequest_Cycle_InLookup = map[string]struct{}{
	"periodic": {},
	"daemon":   {},
	"run_once": {},
}

// Validate checks the field values on UpdateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) < 1 {
		return UpdateAppRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for AppState

	if utf8.RuneCountInString(m.GetVersion()) != 0 {
		return UpdateAppRequestValidationError{
			field:  "Version",
			reason: "value length must be 0 runes",
		}

	}

	// no validation rules for FromCatalog

	// no validation rules for Description

	if _, ok := _UpdateAppRequest_Cycle_InLookup[m.GetCycle()]; !ok {
		return UpdateAppRequestValidationError{
			field:  "Cycle",
			reason: "value must be in list [periodic daemon run_once]",
		}
	}

	if v, ok := interface{}(m.GetCyclePeriodicAttr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppRequestValidationError{
				field:  "CyclePeriodicAttr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RootGroupId

	// no validation rules for AppConfigs

	// no validation rules for EnvVars

	// no validation rules for Secrets

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for SharedStorage

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAppRequestValidationError is the validation error returned by
// UpdateAppRequest.Validate if the designated constraints aren't met.
type UpdateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppRequestValidationError) ErrorName() string { return "UpdateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppRequestValidationError{}

var _UpdateAppRequest_Cycle_InLookup = map[string]struct{}{
	"periodic": {},
	"daemon":   {},
	"run_once": {},
}

// Validate checks the field values on GetAppsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetAppsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Version

	if _, ok := _GetAppsRequest_Cycle_InLookup[m.GetCycle()]; !ok {
		return GetAppsRequestValidationError{
			field:  "Cycle",
			reason: "value must be in list [periodic daemon run_once ]",
		}
	}

	// no validation rules for RootGroupId

	// no validation rules for Verbose

	return nil
}

// GetAppsRequestValidationError is the validation error returned by
// GetAppsRequest.Validate if the designated constraints aren't met.
type GetAppsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppsRequestValidationError) ErrorName() string { return "GetAppsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAppsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppsRequestValidationError{}

var _GetAppsRequest_Cycle_InLookup = map[string]struct{}{
	"periodic": {},
	"daemon":   {},
	"run_once": {},
	"":         {},
}

// Validate checks the field values on DeleteAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) < 1 {
		return DeleteAppRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for Version

	// no validation rules for RootGroupId

	// no validation rules for Purge

	return nil
}

// DeleteAppRequestValidationError is the validation error returned by
// DeleteAppRequest.Validate if the designated constraints aren't met.
type DeleteAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppRequestValidationError) ErrorName() string { return "DeleteAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppRequestValidationError{}

// Validate checks the field values on DeleteAppMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAppMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetAppName()) < 1 {
		return DeleteAppMetadataRequestValidationError{
			field:  "AppName",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for Version

	// no validation rules for RootGroupId

	return nil
}

// DeleteAppMetadataRequestValidationError is the validation error returned by
// DeleteAppMetadataRequest.Validate if the designated constraints aren't met.
type DeleteAppMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppMetadataRequestValidationError) ErrorName() string {
	return "DeleteAppMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAppMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppMetadataRequestValidationError{}

// Validate checks the field values on DeleteAppsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteAppsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Purge

	return nil
}

// DeleteAppsRequestValidationError is the validation error returned by
// DeleteAppsRequest.Validate if the designated constraints aren't met.
type DeleteAppsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppsRequestValidationError) ErrorName() string {
	return "DeleteAppsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAppsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppsRequestValidationError{}

// Validate checks the field values on EnableDisableAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnableDisableAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for RootGroupId

	// no validation rules for Disable

	return nil
}

// EnableDisableAppRequestValidationError is the validation error returned by
// EnableDisableAppRequest.Validate if the designated constraints aren't met.
type EnableDisableAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableDisableAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableDisableAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableDisableAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableDisableAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableDisableAppRequestValidationError) ErrorName() string {
	return "EnableDisableAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableDisableAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableDisableAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableDisableAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableDisableAppRequestValidationError{}

// Validate checks the field values on CyclePeriodicReqAttr with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CyclePeriodicReqAttr) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWorkingDays()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CyclePeriodicReqAttrValidationError{
				field:  "WorkingDays",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetMinStartHour(); val < 0 || val > 23 {
		return CyclePeriodicReqAttrValidationError{
			field:  "MinStartHour",
			reason: "value must be inside range [0, 23]",
		}
	}

	if val := m.GetMaxStartHour(); val < 0 || val > 23 {
		return CyclePeriodicReqAttrValidationError{
			field:  "MaxStartHour",
			reason: "value must be inside range [0, 23]",
		}
	}

	if val := m.GetIntervalMin(); val < 1 || val > 59 {
		return CyclePeriodicReqAttrValidationError{
			field:  "IntervalMin",
			reason: "value must be inside range [1, 59]",
		}
	}

	return nil
}

// CyclePeriodicReqAttrValidationError is the validation error returned by
// CyclePeriodicReqAttr.Validate if the designated constraints aren't met.
type CyclePeriodicReqAttrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CyclePeriodicReqAttrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CyclePeriodicReqAttrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CyclePeriodicReqAttrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CyclePeriodicReqAttrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CyclePeriodicReqAttrValidationError) ErrorName() string {
	return "CyclePeriodicReqAttrValidationError"
}

// Error satisfies the builtin error interface
func (e CyclePeriodicReqAttrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCyclePeriodicReqAttr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CyclePeriodicReqAttrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CyclePeriodicReqAttrValidationError{}

// Validate checks the field values on Spec with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Spec) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetImage() == nil {
		return SpecValidationError{
			field:  "Image",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpecValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SpecValidationError is the validation error returned by Spec.Validate if the
// designated constraints aren't met.
type SpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecValidationError) ErrorName() string { return "SpecValidationError" }

// Error satisfies the builtin error interface
func (e SpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecValidationError{}

// Validate checks the field values on CyclePeriodicRespAttr with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CyclePeriodicRespAttr) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MinStartHour

	// no validation rules for MaxStartHour

	// no validation rules for IntervalMin

	return nil
}

// CyclePeriodicRespAttrValidationError is the validation error returned by
// CyclePeriodicRespAttr.Validate if the designated constraints aren't met.
type CyclePeriodicRespAttrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CyclePeriodicRespAttrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CyclePeriodicRespAttrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CyclePeriodicRespAttrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CyclePeriodicRespAttrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CyclePeriodicRespAttrValidationError) ErrorName() string {
	return "CyclePeriodicRespAttrValidationError"
}

// Error satisfies the builtin error interface
func (e CyclePeriodicRespAttrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCyclePeriodicRespAttr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CyclePeriodicRespAttrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CyclePeriodicRespAttrValidationError{}

// Validate checks the field values on PeriodicFields with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PeriodicFields) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Schedule

	// no validation rules for LastScheduleTime

	// no validation rules for FailedJobsHistoryLimit

	// no validation rules for SuccessfulJobsHistoryLimit

	return nil
}

// PeriodicFieldsValidationError is the validation error returned by
// PeriodicFields.Validate if the designated constraints aren't met.
type PeriodicFieldsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeriodicFieldsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeriodicFieldsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeriodicFieldsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeriodicFieldsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeriodicFieldsValidationError) ErrorName() string { return "PeriodicFieldsValidationError" }

// Error satisfies the builtin error interface
func (e PeriodicFieldsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeriodicFields.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeriodicFieldsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeriodicFieldsValidationError{}

// Validate checks the field values on RunOnceFields with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RunOnceFields) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Active

	// no validation rules for Completions

	// no validation rules for Failed

	// no validation rules for Succeeded

	// no validation rules for StartTime

	// no validation rules for CompletionTime

	return nil
}

// RunOnceFieldsValidationError is the validation error returned by
// RunOnceFields.Validate if the designated constraints aren't met.
type RunOnceFieldsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunOnceFieldsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunOnceFieldsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunOnceFieldsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunOnceFieldsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunOnceFieldsValidationError) ErrorName() string { return "RunOnceFieldsValidationError" }

// Error satisfies the builtin error interface
func (e RunOnceFieldsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunOnceFields.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunOnceFieldsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunOnceFieldsValidationError{}

// Validate checks the field values on Resources with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Resources) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequests()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourcesValidationError{
				field:  "Requests",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLimits()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourcesValidationError{
				field:  "Limits",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PersistentStorage

	return nil
}

// ResourcesValidationError is the validation error returned by
// Resources.Validate if the designated constraints aren't met.
type ResourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesValidationError) ErrorName() string { return "ResourcesValidationError" }

// Error satisfies the builtin error interface
func (e ResourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesValidationError{}

// Validate checks the field values on Instance with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Instance) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Version

	// no validation rules for RootGroupId

	// no validation rules for GroupId

	// no validation rules for State

	// no validation rules for Cycle

	// no validation rules for ImageRepo

	// no validation rules for ImageName

	// no validation rules for ImageTag

	// no validation rules for CreateDate

	// no validation rules for UpdateDate

	// no validation rules for ProjectId

	// no validation rules for Namespace

	// no validation rules for Scale

	if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPublicEndpoints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceValidationError{
					field:  fmt.Sprintf("PublicEndpoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.CycleFields.(type) {

	case *Instance_PeriodicFields:

		if v, ok := interface{}(m.GetPeriodicFields()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceValidationError{
					field:  "PeriodicFields",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Instance_RunOnceFields:

		if v, ok := interface{}(m.GetRunOnceFields()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceValidationError{
					field:  "RunOnceFields",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// InstanceValidationError is the validation error returned by
// Instance.Validate if the designated constraints aren't met.
type InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceValidationError) ErrorName() string { return "InstanceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceValidationError{}

// Validate checks the field values on Template with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Template) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for CatalogId

	return nil
}

// TemplateValidationError is the validation error returned by
// Template.Validate if the designated constraints aren't met.
type TemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateValidationError) ErrorName() string { return "TemplateValidationError" }

// Error satisfies the builtin error interface
func (e TemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateValidationError{}

// Validate checks the field values on AppInstance with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AppInstance) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Version

	// no validation rules for RootGroupId

	// no validation rules for GroupId

	if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppInstanceValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AppInstanceValidationError is the validation error returned by
// AppInstance.Validate if the designated constraints aren't met.
type AppInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppInstanceValidationError) ErrorName() string { return "AppInstanceValidationError" }

// Error satisfies the builtin error interface
func (e AppInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppInstanceValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *App) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Cycle

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on Apps with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Apps) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppsValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AppsValidationError is the validation error returned by Apps.Validate if the
// designated constraints aren't met.
type AppsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppsValidationError) ErrorName() string { return "AppsValidationError" }

// Error satisfies the builtin error interface
func (e AppsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApps.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppsValidationError{}

// Validate checks the field values on AppInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AppInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MonitorUrl

	// no validation rules for LogsUrl

	if v, ok := interface{}(m.GetTotalResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppInfoValidationError{
				field:  "TotalResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SharedStorage

	if v, ok := interface{}(m.GetCyclePeriodicFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppInfoValidationError{
				field:  "CyclePeriodicFields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppInfoValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AppInfoValidationError is the validation error returned by AppInfo.Validate
// if the designated constraints aren't met.
type AppInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppInfoValidationError) ErrorName() string { return "AppInfoValidationError" }

// Error satisfies the builtin error interface
func (e AppInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppInfoValidationError{}

// Validate checks the field values on AppsInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AppsInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Apps

	return nil
}

// AppsInfoValidationError is the validation error returned by
// AppsInfo.Validate if the designated constraints aren't met.
type AppsInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppsInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppsInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppsInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppsInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppsInfoValidationError) ErrorName() string { return "AppsInfoValidationError" }

// Error satisfies the builtin error interface
func (e AppsInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppsInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppsInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppsInfoValidationError{}

// Validate checks the field values on AppTemplates with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AppTemplates) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppName

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppTemplatesValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AppTemplatesValidationError is the validation error returned by
// AppTemplates.Validate if the designated constraints aren't met.
type AppTemplatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppTemplatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppTemplatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppTemplatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppTemplatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppTemplatesValidationError) ErrorName() string { return "AppTemplatesValidationError" }

// Error satisfies the builtin error interface
func (e AppTemplatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppTemplates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppTemplatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppTemplatesValidationError{}

// Validate checks the field values on AffectedAppInstance with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AffectedAppInstance) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Version

	// no validation rules for RootGroupId

	// no validation rules for GroupId

	return nil
}

// AffectedAppInstanceValidationError is the validation error returned by
// AffectedAppInstance.Validate if the designated constraints aren't met.
type AffectedAppInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AffectedAppInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AffectedAppInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AffectedAppInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AffectedAppInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AffectedAppInstanceValidationError) ErrorName() string {
	return "AffectedAppInstanceValidationError"
}

// Error satisfies the builtin error interface
func (e AffectedAppInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAffectedAppInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AffectedAppInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AffectedAppInstanceValidationError{}

// Validate checks the field values on AffectedAppInstances with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AffectedAppInstances) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AffectedAppInstancesValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AffectedAppInstancesValidationError is the validation error returned by
// AffectedAppInstances.Validate if the designated constraints aren't met.
type AffectedAppInstancesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AffectedAppInstancesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AffectedAppInstancesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AffectedAppInstancesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AffectedAppInstancesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AffectedAppInstancesValidationError) ErrorName() string {
	return "AffectedAppInstancesValidationError"
}

// Error satisfies the builtin error interface
func (e AffectedAppInstancesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAffectedAppInstances.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AffectedAppInstancesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AffectedAppInstancesValidationError{}

// Validate checks the field values on AppsActivation with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AppsActivation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Apps

	return nil
}

// AppsActivationValidationError is the validation error returned by
// AppsActivation.Validate if the designated constraints aren't met.
type AppsActivationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppsActivationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppsActivationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppsActivationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppsActivationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppsActivationValidationError) ErrorName() string { return "AppsActivationValidationError" }

// Error satisfies the builtin error interface
func (e AppsActivationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppsActivation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppsActivationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppsActivationValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Response) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTimestamp() == nil {
		return ResponseValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
	}

	// no validation rules for Status

	// no validation rules for Message

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on CyclePeriodicReqAttr_Sched with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CyclePeriodicReqAttr_Sched) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Saturday

	// no validation rules for Sunday

	// no validation rules for Monday

	// no validation rules for Tuesday

	// no validation rules for Wednesday

	// no validation rules for Thursday

	// no validation rules for Friday

	return nil
}

// CyclePeriodicReqAttr_SchedValidationError is the validation error returned
// by CyclePeriodicReqAttr_Sched.Validate if the designated constraints aren't met.
type CyclePeriodicReqAttr_SchedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CyclePeriodicReqAttr_SchedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CyclePeriodicReqAttr_SchedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CyclePeriodicReqAttr_SchedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CyclePeriodicReqAttr_SchedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CyclePeriodicReqAttr_SchedValidationError) ErrorName() string {
	return "CyclePeriodicReqAttr_SchedValidationError"
}

// Error satisfies the builtin error interface
func (e CyclePeriodicReqAttr_SchedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCyclePeriodicReqAttr_Sched.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CyclePeriodicReqAttr_SchedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CyclePeriodicReqAttr_SchedValidationError{}

// Validate checks the field values on Spec_Image with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Spec_Image) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetRepo()) < 1 {
		return Spec_ImageValidationError{
			field:  "Repo",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetTag()) < 1 {
		return Spec_ImageValidationError{
			field:  "Tag",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// Spec_ImageValidationError is the validation error returned by
// Spec_Image.Validate if the designated constraints aren't met.
type Spec_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Spec_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Spec_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Spec_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Spec_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Spec_ImageValidationError) ErrorName() string { return "Spec_ImageValidationError" }

// Error satisfies the builtin error interface
func (e Spec_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpec_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Spec_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Spec_ImageValidationError{}

// Validate checks the field values on Spec_Port with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Spec_Port) Validate() error {
	if m == nil {
		return nil
	}

	if !_Spec_Port_Name_Pattern.MatchString(m.GetName()) {
		return Spec_PortValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"(^\\\\s*$|^[^-.0-9][a-z0-9.-]{1,63}[^-.]$)\"",
		}
	}

	if m.GetNumber() > 65535 {
		return Spec_PortValidationError{
			field:  "Number",
			reason: "value must be less than or equal to 65535",
		}
	}

	// no validation rules for Proto

	return nil
}

// Spec_PortValidationError is the validation error returned by
// Spec_Port.Validate if the designated constraints aren't met.
type Spec_PortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Spec_PortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Spec_PortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Spec_PortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Spec_PortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Spec_PortValidationError) ErrorName() string { return "Spec_PortValidationError" }

// Error satisfies the builtin error interface
func (e Spec_PortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpec_Port.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Spec_PortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Spec_PortValidationError{}

var _Spec_Port_Name_Pattern = regexp.MustCompile("(^\\s*$|^[^-.0-9][a-z0-9.-]{1,63}[^-.]$)")

// Validate checks the field values on Spec_Resources with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Spec_Resources) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PersistentStorage

	if v, ok := interface{}(m.GetLimits()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Spec_ResourcesValidationError{
				field:  "Limits",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// Spec_ResourcesValidationError is the validation error returned by
// Spec_Resources.Validate if the designated constraints aren't met.
type Spec_ResourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Spec_ResourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Spec_ResourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Spec_ResourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Spec_ResourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Spec_ResourcesValidationError) ErrorName() string { return "Spec_ResourcesValidationError" }

// Error satisfies the builtin error interface
func (e Spec_ResourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpec_Resources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Spec_ResourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Spec_ResourcesValidationError{}

// Validate checks the field values on Spec_Resources_Limits with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Spec_Resources_Limits) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Memory

	// no validation rules for Cpu

	return nil
}

// Spec_Resources_LimitsValidationError is the validation error returned by
// Spec_Resources_Limits.Validate if the designated constraints aren't met.
type Spec_Resources_LimitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Spec_Resources_LimitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Spec_Resources_LimitsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Spec_Resources_LimitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Spec_Resources_LimitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Spec_Resources_LimitsValidationError) ErrorName() string {
	return "Spec_Resources_LimitsValidationError"
}

// Error satisfies the builtin error interface
func (e Spec_Resources_LimitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpec_Resources_Limits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Spec_Resources_LimitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Spec_Resources_LimitsValidationError{}

// Validate checks the field values on Resources_Requests with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Resources_Requests) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Memory

	// no validation rules for Cpu

	return nil
}

// Resources_RequestsValidationError is the validation error returned by
// Resources_Requests.Validate if the designated constraints aren't met.
type Resources_RequestsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Resources_RequestsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Resources_RequestsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Resources_RequestsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Resources_RequestsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Resources_RequestsValidationError) ErrorName() string {
	return "Resources_RequestsValidationError"
}

// Error satisfies the builtin error interface
func (e Resources_RequestsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResources_Requests.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Resources_RequestsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Resources_RequestsValidationError{}

// Validate checks the field values on Resources_Limits with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Resources_Limits) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Memory

	// no validation rules for Cpu

	return nil
}

// Resources_LimitsValidationError is the validation error returned by
// Resources_Limits.Validate if the designated constraints aren't met.
type Resources_LimitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Resources_LimitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Resources_LimitsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Resources_LimitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Resources_LimitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Resources_LimitsValidationError) ErrorName() string { return "Resources_LimitsValidationError" }

// Error satisfies the builtin error interface
func (e Resources_LimitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResources_Limits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Resources_LimitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Resources_LimitsValidationError{}

// Validate checks the field values on Instance_Container with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Instance_Container) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for State

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Instance_ContainerValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVolMounts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Instance_ContainerValidationError{
					field:  fmt.Sprintf("VolMounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// Instance_ContainerValidationError is the validation error returned by
// Instance_Container.Validate if the designated constraints aren't met.
type Instance_ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Instance_ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Instance_ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Instance_ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Instance_ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Instance_ContainerValidationError) ErrorName() string {
	return "Instance_ContainerValidationError"
}

// Error satisfies the builtin error interface
func (e Instance_ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance_Container.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Instance_ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Instance_ContainerValidationError{}

// Validate checks the field values on Instance_PublicEndpoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Instance_PublicEndpoint) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AllNodes

	// no validation rules for Hostname

	// no validation rules for IngressId

	// no validation rules for NodeId

	// no validation rules for Path

	// no validation rules for PodId

	// no validation rules for Port

	// no validation rules for Proto

	// no validation rules for ServiceId

	return nil
}

// Instance_PublicEndpointValidationError is the validation error returned by
// Instance_PublicEndpoint.Validate if the designated constraints aren't met.
type Instance_PublicEndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Instance_PublicEndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Instance_PublicEndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Instance_PublicEndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Instance_PublicEndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Instance_PublicEndpointValidationError) ErrorName() string {
	return "Instance_PublicEndpointValidationError"
}

// Error satisfies the builtin error interface
func (e Instance_PublicEndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance_PublicEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Instance_PublicEndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Instance_PublicEndpointValidationError{}

// Validate checks the field values on Instance_Container_Port with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Instance_Container_Port) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Port

	// no validation rules for DnsName

	// no validation rules for HostIp

	// no validation rules for Kind

	// no validation rules for Proto

	// no validation rules for SrcPort

	return nil
}

// Instance_Container_PortValidationError is the validation error returned by
// Instance_Container_Port.Validate if the designated constraints aren't met.
type Instance_Container_PortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Instance_Container_PortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Instance_Container_PortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Instance_Container_PortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Instance_Container_PortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Instance_Container_PortValidationError) ErrorName() string {
	return "Instance_Container_PortValidationError"
}

// Error satisfies the builtin error interface
func (e Instance_Container_PortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance_Container_Port.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Instance_Container_PortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Instance_Container_PortValidationError{}

// Validate checks the field values on Instance_Container_VolumeMount with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Instance_Container_VolumeMount) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for MountPath

	// no validation rules for ReadOnly

	// no validation rules for SubPath

	return nil
}

// Instance_Container_VolumeMountValidationError is the validation error
// returned by Instance_Container_VolumeMount.Validate if the designated
// constraints aren't met.
type Instance_Container_VolumeMountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Instance_Container_VolumeMountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Instance_Container_VolumeMountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Instance_Container_VolumeMountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Instance_Container_VolumeMountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Instance_Container_VolumeMountValidationError) ErrorName() string {
	return "Instance_Container_VolumeMountValidationError"
}

// Error satisfies the builtin error interface
func (e Instance_Container_VolumeMountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance_Container_VolumeMount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Instance_Container_VolumeMountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Instance_Container_VolumeMountValidationError{}
