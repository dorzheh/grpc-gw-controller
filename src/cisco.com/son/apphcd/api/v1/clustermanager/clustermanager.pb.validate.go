// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: clustermanager.proto

package clustermanager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Condition with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Condition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for State

	return nil
}

// ConditionValidationError is the validation error returned by
// Condition.Validate if the designated constraints aren't met.
type ConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionValidationError) ErrorName() string { return "ConditionValidationError" }

// Error satisfies the builtin error interface
func (e ConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionValidationError{}

// Validate checks the field values on Cpu with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Cpu) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	// no validation rules for Allocated

	return nil
}

// CpuValidationError is the validation error returned by Cpu.Validate if the
// designated constraints aren't met.
type CpuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CpuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CpuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CpuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CpuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CpuValidationError) ErrorName() string { return "CpuValidationError" }

// Error satisfies the builtin error interface
func (e CpuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCpu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CpuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CpuValidationError{}

// Validate checks the field values on Memory with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Memory) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	// no validation rules for Allocated

	// no validation rules for Free

	return nil
}

// MemoryValidationError is the validation error returned by Memory.Validate if
// the designated constraints aren't met.
type MemoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoryValidationError) ErrorName() string { return "MemoryValidationError" }

// Error satisfies the builtin error interface
func (e MemoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoryValidationError{}

// Validate checks the field values on GetClusterInfoResponseBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClusterInfoResponseBody) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterName

	// no validation rules for Id

	// no validation rules for CreationDate

	if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterInfoResponseBodyValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCpuCores()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterInfoResponseBodyValidationError{
				field:  "CpuCores",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterInfoResponseBodyValidationError{
				field:  "Memory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastUpgradeStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterInfoResponseBodyValidationError{
				field:  "LastUpgradeStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SvcMonitorUrl

	if v, ok := interface{}(m.GetWorkloads()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterInfoResponseBodyValidationError{
				field:  "Workloads",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NumberOfNodes

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClusterInfoResponseBodyValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetClusterInfoResponseBodyValidationError is the validation error returned
// by GetClusterInfoResponseBody.Validate if the designated constraints aren't met.
type GetClusterInfoResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterInfoResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterInfoResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterInfoResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoResponseBodyValidationError) ErrorName() string {
	return "GetClusterInfoResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoResponseBodyValidationError{}

// Validate checks the field values on GetKubeConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetKubeConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetKubeConfigRequestValidationError is the validation error returned by
// GetKubeConfigRequest.Validate if the designated constraints aren't met.
type GetKubeConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubeConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubeConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubeConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubeConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubeConfigRequestValidationError) ErrorName() string {
	return "GetKubeConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubeConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubeConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubeConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubeConfigRequestValidationError{}

// Validate checks the field values on GetKubeConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetKubeConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kubeconfig

	return nil
}

// GetKubeConfigResponseValidationError is the validation error returned by
// GetKubeConfigResponse.Validate if the designated constraints aren't met.
type GetKubeConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubeConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubeConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubeConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubeConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubeConfigResponseValidationError) ErrorName() string {
	return "GetKubeConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubeConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubeConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubeConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubeConfigResponseValidationError{}

// Validate checks the field values on GetClusterInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClusterInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hostname

	return nil
}

// GetClusterInfoRequestValidationError is the validation error returned by
// GetClusterInfoRequest.Validate if the designated constraints aren't met.
type GetClusterInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoRequestValidationError) ErrorName() string {
	return "GetClusterInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoRequestValidationError{}

// Validate checks the field values on UpgradeClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpgradeClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpgradeClusterRequestValidationError is the validation error returned by
// UpgradeClusterRequest.Validate if the designated constraints aren't met.
type UpgradeClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeClusterRequestValidationError) ErrorName() string {
	return "UpgradeClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeClusterRequestValidationError{}

// Validate checks the field values on Quota with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Quota) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetNamespace()) < 1 {
		return QuotaValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 bytes",
		}
	}

	if m.GetMemory() <= 0 {
		return QuotaValidationError{
			field:  "Memory",
			reason: "value must be greater than 0",
		}
	}

	if m.GetCpu() <= 0 {
		return QuotaValidationError{
			field:  "Cpu",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// QuotaValidationError is the validation error returned by Quota.Validate if
// the designated constraints aren't met.
type QuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaValidationError) ErrorName() string { return "QuotaValidationError" }

// Error satisfies the builtin error interface
func (e QuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaValidationError{}

// Validate checks the field values on SetClusterResourceQuotasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetClusterResourceQuotasRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetQuotas()) < 1 {
		return SetClusterResourceQuotasRequestValidationError{
			field:  "Quotas",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetQuotas() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetClusterResourceQuotasRequestValidationError{
					field:  fmt.Sprintf("Quotas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SetClusterResourceQuotasRequestValidationError is the validation error
// returned by SetClusterResourceQuotasRequest.Validate if the designated
// constraints aren't met.
type SetClusterResourceQuotasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetClusterResourceQuotasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetClusterResourceQuotasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetClusterResourceQuotasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetClusterResourceQuotasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetClusterResourceQuotasRequestValidationError) ErrorName() string {
	return "SetClusterResourceQuotasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetClusterResourceQuotasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetClusterResourceQuotasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetClusterResourceQuotasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetClusterResourceQuotasRequestValidationError{}

// Validate checks the field values on GetClusterResourceQuotasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClusterResourceQuotasRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetNamespaces()) < 1 {
		return GetClusterResourceQuotasRequestValidationError{
			field:  "Namespaces",
			reason: "value must contain at least 1 item(s)",
		}
	}

	return nil
}

// GetClusterResourceQuotasRequestValidationError is the validation error
// returned by GetClusterResourceQuotasRequest.Validate if the designated
// constraints aren't met.
type GetClusterResourceQuotasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterResourceQuotasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterResourceQuotasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterResourceQuotasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterResourceQuotasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterResourceQuotasRequestValidationError) ErrorName() string {
	return "GetClusterResourceQuotasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterResourceQuotasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterResourceQuotasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterResourceQuotasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterResourceQuotasRequestValidationError{}

// Validate checks the field values on DeleteClusterResourceQuotasRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DeleteClusterResourceQuotasRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Namespace

	return nil
}

// DeleteClusterResourceQuotasRequestValidationError is the validation error
// returned by DeleteClusterResourceQuotasRequest.Validate if the designated
// constraints aren't met.
type DeleteClusterResourceQuotasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterResourceQuotasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterResourceQuotasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterResourceQuotasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterResourceQuotasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterResourceQuotasRequestValidationError) ErrorName() string {
	return "DeleteClusterResourceQuotasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClusterResourceQuotasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterResourceQuotasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterResourceQuotasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterResourceQuotasRequestValidationError{}

// Validate checks the field values on SetGetClusterResourceQuotasResponseBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetGetClusterResourceQuotasResponseBody) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetQuotas() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetGetClusterResourceQuotasResponseBodyValidationError{
					field:  fmt.Sprintf("Quotas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SetGetClusterResourceQuotasResponseBodyValidationError is the validation
// error returned by SetGetClusterResourceQuotasResponseBody.Validate if the
// designated constraints aren't met.
type SetGetClusterResourceQuotasResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGetClusterResourceQuotasResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGetClusterResourceQuotasResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGetClusterResourceQuotasResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGetClusterResourceQuotasResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGetClusterResourceQuotasResponseBodyValidationError) ErrorName() string {
	return "SetGetClusterResourceQuotasResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e SetGetClusterResourceQuotasResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGetClusterResourceQuotasResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGetClusterResourceQuotasResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGetClusterResourceQuotasResponseBodyValidationError{}

// Validate checks the field values on CreateNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateNodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hostname

	// no validation rules for Master

	return nil
}

// CreateNodeRequestValidationError is the validation error returned by
// CreateNodeRequest.Validate if the designated constraints aren't met.
type CreateNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeRequestValidationError) ErrorName() string {
	return "CreateNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeRequestValidationError{}

// Validate checks the field values on CreateNodeResponseBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNodeResponseBody) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Hostname

	// no validation rules for Master

	return nil
}

// CreateNodeResponseBodyValidationError is the validation error returned by
// CreateNodeResponseBody.Validate if the designated constraints aren't met.
type CreateNodeResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeResponseBodyValidationError) ErrorName() string {
	return "CreateNodeResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeResponseBodyValidationError{}

// Validate checks the field values on UpdateNodeStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeStateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hostname

	// no validation rules for State

	return nil
}

// UpdateNodeStateRequestValidationError is the validation error returned by
// UpdateNodeStateRequest.Validate if the designated constraints aren't met.
type UpdateNodeStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeStateRequestValidationError) ErrorName() string {
	return "UpdateNodeStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeStateRequestValidationError{}

// Validate checks the field values on UpdateNodesStateResponseBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodesStateResponseBody) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Hostname

	// no validation rules for State

	return nil
}

// UpdateNodesStateResponseBodyValidationError is the validation error returned
// by UpdateNodesStateResponseBody.Validate if the designated constraints
// aren't met.
type UpdateNodesStateResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodesStateResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodesStateResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodesStateResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodesStateResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodesStateResponseBodyValidationError) ErrorName() string {
	return "UpdateNodesStateResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodesStateResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodesStateResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodesStateResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodesStateResponseBodyValidationError{}

// Validate checks the field values on DeleteNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteNodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hostname

	return nil
}

// DeleteNodeRequestValidationError is the validation error returned by
// DeleteNodeRequest.Validate if the designated constraints aren't met.
type DeleteNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodeRequestValidationError) ErrorName() string {
	return "DeleteNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodeRequestValidationError{}

// Validate checks the field values on DeleteNodeResponseBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNodeResponseBody) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Hostname

	return nil
}

// DeleteNodeResponseBodyValidationError is the validation error returned by
// DeleteNodeResponseBody.Validate if the designated constraints aren't met.
type DeleteNodeResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodeResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodeResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodeResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodeResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodeResponseBodyValidationError) ErrorName() string {
	return "DeleteNodeResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodeResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodeResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodeResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodeResponseBodyValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Response) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTimestamp() == nil {
		return ResponseValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
	}

	// no validation rules for Status

	// no validation rules for Message

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on GetClusterInfoResponseBody_UpgradeStatus
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetClusterInfoResponseBody_UpgradeStatus) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLastUpgrade() == nil {
		return GetClusterInfoResponseBody_UpgradeStatusValidationError{
			field:  "LastUpgrade",
			reason: "value is required",
		}
	}

	// no validation rules for Status

	// no validation rules for ErrorMessage

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClusterInfoResponseBody_UpgradeStatusValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetClusterInfoResponseBody_UpgradeStatusValidationError is the validation
// error returned by GetClusterInfoResponseBody_UpgradeStatus.Validate if the
// designated constraints aren't met.
type GetClusterInfoResponseBody_UpgradeStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoResponseBody_UpgradeStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterInfoResponseBody_UpgradeStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterInfoResponseBody_UpgradeStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterInfoResponseBody_UpgradeStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoResponseBody_UpgradeStatusValidationError) ErrorName() string {
	return "GetClusterInfoResponseBody_UpgradeStatusValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoResponseBody_UpgradeStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoResponseBody_UpgradeStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoResponseBody_UpgradeStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoResponseBody_UpgradeStatusValidationError{}

// Validate checks the field values on GetClusterInfoResponseBody_App with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClusterInfoResponseBody_App) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for NumberOfInstances

	// no validation rules for Active

	return nil
}

// GetClusterInfoResponseBody_AppValidationError is the validation error
// returned by GetClusterInfoResponseBody_App.Validate if the designated
// constraints aren't met.
type GetClusterInfoResponseBody_AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoResponseBody_AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterInfoResponseBody_AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterInfoResponseBody_AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterInfoResponseBody_AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoResponseBody_AppValidationError) ErrorName() string {
	return "GetClusterInfoResponseBody_AppValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoResponseBody_AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoResponseBody_App.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoResponseBody_AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoResponseBody_AppValidationError{}

// Validate checks the field values on GetClusterInfoResponseBody_Workloads
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetClusterInfoResponseBody_Workloads) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumberOfApps

	// no validation rules for NumberOfInstances

	// no validation rules for NumberOfActiveApps

	// no validation rules for NumberOfActiveInstances

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClusterInfoResponseBody_WorkloadsValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetClusterInfoResponseBody_WorkloadsValidationError is the validation error
// returned by GetClusterInfoResponseBody_Workloads.Validate if the designated
// constraints aren't met.
type GetClusterInfoResponseBody_WorkloadsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoResponseBody_WorkloadsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterInfoResponseBody_WorkloadsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterInfoResponseBody_WorkloadsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterInfoResponseBody_WorkloadsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoResponseBody_WorkloadsValidationError) ErrorName() string {
	return "GetClusterInfoResponseBody_WorkloadsValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoResponseBody_WorkloadsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoResponseBody_Workloads.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoResponseBody_WorkloadsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoResponseBody_WorkloadsValidationError{}

// Validate checks the field values on GetClusterInfoResponseBody_Node with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClusterInfoResponseBody_Node) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hostname

	// no validation rules for Id

	// no validation rules for ExternalIp

	if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterInfoResponseBody_NodeValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCpuCores()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterInfoResponseBody_NodeValidationError{
				field:  "CpuCores",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterInfoResponseBody_NodeValidationError{
				field:  "Memory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLocalStorage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterInfoResponseBody_NodeValidationError{
				field:  "LocalStorage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MonitorUrl

	// no validation rules for Master

	// no validation rules for Worker

	// no validation rules for Etcd

	return nil
}

// GetClusterInfoResponseBody_NodeValidationError is the validation error
// returned by GetClusterInfoResponseBody_Node.Validate if the designated
// constraints aren't met.
type GetClusterInfoResponseBody_NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoResponseBody_NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterInfoResponseBody_NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterInfoResponseBody_NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterInfoResponseBody_NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoResponseBody_NodeValidationError) ErrorName() string {
	return "GetClusterInfoResponseBody_NodeValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoResponseBody_NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoResponseBody_Node.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoResponseBody_NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoResponseBody_NodeValidationError{}

// Validate checks the field values on
// GetClusterInfoResponseBody_UpgradeStatus_Component with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetClusterInfoResponseBody_UpgradeStatus_Component) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for ErrorMessage

	return nil
}

// GetClusterInfoResponseBody_UpgradeStatus_ComponentValidationError is the
// validation error returned by
// GetClusterInfoResponseBody_UpgradeStatus_Component.Validate if the
// designated constraints aren't met.
type GetClusterInfoResponseBody_UpgradeStatus_ComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoResponseBody_UpgradeStatus_ComponentValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetClusterInfoResponseBody_UpgradeStatus_ComponentValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetClusterInfoResponseBody_UpgradeStatus_ComponentValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetClusterInfoResponseBody_UpgradeStatus_ComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoResponseBody_UpgradeStatus_ComponentValidationError) ErrorName() string {
	return "GetClusterInfoResponseBody_UpgradeStatus_ComponentValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoResponseBody_UpgradeStatus_ComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoResponseBody_UpgradeStatus_Component.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoResponseBody_UpgradeStatus_ComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoResponseBody_UpgradeStatus_ComponentValidationError{}

// Validate checks the field values on GetClusterInfoResponseBody_Node_Storage
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetClusterInfoResponseBody_Node_Storage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	// no validation rules for Used

	// no validation rules for Free

	return nil
}

// GetClusterInfoResponseBody_Node_StorageValidationError is the validation
// error returned by GetClusterInfoResponseBody_Node_Storage.Validate if the
// designated constraints aren't met.
type GetClusterInfoResponseBody_Node_StorageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoResponseBody_Node_StorageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterInfoResponseBody_Node_StorageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterInfoResponseBody_Node_StorageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterInfoResponseBody_Node_StorageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoResponseBody_Node_StorageValidationError) ErrorName() string {
	return "GetClusterInfoResponseBody_Node_StorageValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoResponseBody_Node_StorageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoResponseBody_Node_Storage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoResponseBody_Node_StorageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoResponseBody_Node_StorageValidationError{}
